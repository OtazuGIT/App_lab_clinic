diff --git a/database.py b/database.py
index df285039fb63c64a60f95225fda7066324446451..f2d4db70033f6a67416bfe5fbbd37547a8f36ca6 100644
--- a/database.py
+++ b/database.py
@@ -14,86 +14,92 @@ class LabDB:
         self.conn.commit()
     def init_db(self):
         # Crear tablas
         self.cur.execute("""
             CREATE TABLE IF NOT EXISTS users (
                 id INTEGER PRIMARY KEY AUTOINCREMENT,
                 username TEXT UNIQUE,
                 password TEXT,
                 role TEXT
             )
         """)
         self.cur.execute("""
             CREATE TABLE IF NOT EXISTS patients (
                 id INTEGER PRIMARY KEY AUTOINCREMENT,
                 doc_type TEXT,
                 doc_number TEXT,
                 first_name TEXT,
                 last_name TEXT,
                 birth_date TEXT,
                 sex TEXT,
                 origin TEXT,
                 hcl TEXT,
                 height REAL,
                 weight REAL,
                 blood_pressure TEXT,
+                is_pregnant INTEGER DEFAULT 0,
+                gestational_age_weeks INTEGER,
+                expected_delivery_date TEXT,
                 UNIQUE(doc_type, doc_number)
             )
         """)
         self.cur.execute("""
             CREATE TABLE IF NOT EXISTS tests (
                 id INTEGER PRIMARY KEY AUTOINCREMENT,
                 name TEXT,
                 category TEXT
             )
         """)
         self.cur.execute("""
             CREATE TABLE IF NOT EXISTS orders (
                 id INTEGER PRIMARY KEY AUTOINCREMENT,
                 patient_id INTEGER,
                 date TEXT,
                 sample_date TEXT,
                 created_by INTEGER,
                 observations TEXT,
                 requested_by TEXT,
                 diagnosis TEXT,
                 age_years INTEGER,
                 completed INTEGER DEFAULT 0,
                 FOREIGN KEY(patient_id) REFERENCES patients(id),
                 FOREIGN KEY(created_by) REFERENCES users(id)
             )
         """)
         # Asegurarse de que columnas nuevas existan para bases de datos creadas anteriormente
         self._ensure_column_exists("orders", "diagnosis", "TEXT", default_value="")
         self._ensure_column_exists("orders", "age_years", "INTEGER")
         self._ensure_column_exists("orders", "sample_date", "TEXT")
         self._ensure_column_exists("orders", "emitted", "INTEGER", default_value="0")
         self._ensure_column_exists("orders", "emitted_at", "TEXT")
         self._ensure_column_exists("orders", "deleted", "INTEGER", default_value="0")
         self._ensure_column_exists("orders", "deleted_reason", "TEXT")
         self._ensure_column_exists("orders", "deleted_by", "INTEGER")
         self._ensure_column_exists("orders", "deleted_at", "TEXT")
+        self._ensure_column_exists("patients", "is_pregnant", "INTEGER", default_value="0")
+        self._ensure_column_exists("patients", "gestational_age_weeks", "INTEGER")
+        self._ensure_column_exists("patients", "expected_delivery_date", "TEXT")
         self.cur.execute("""
             CREATE TABLE IF NOT EXISTS order_tests (
                 id INTEGER PRIMARY KEY AUTOINCREMENT,
                 order_id INTEGER,
                 test_id INTEGER,
                 result TEXT,
                 sample_status TEXT DEFAULT 'recibida',
                 sample_issue TEXT,
                 observation TEXT,
                 deleted INTEGER DEFAULT 0,
                 deleted_reason TEXT,
                 deleted_by INTEGER,
                 deleted_at TEXT,
                 FOREIGN KEY(order_id) REFERENCES orders(id),
                 FOREIGN KEY(test_id) REFERENCES tests(id)
             )
         """)
         self.conn.commit()
         # Datos iniciales por defecto
         self.cur.execute("SELECT COUNT(*) FROM users")
         if self.cur.fetchone()[0] == 0:
             # Crear usuario admin por defecto
             self.cur.execute("INSERT INTO users(username, password, role) VALUES (?,?,?)",
                              ("admin", "admin", "super"))
             self.conn.commit()
diff --git a/database.py b/database.py
index df285039fb63c64a60f95225fda7066324446451..f2d4db70033f6a67416bfe5fbbd37547a8f36ca6 100644
--- a/database.py
+++ b/database.py
@@ -178,69 +184,140 @@ class LabDB:
         self._ensure_column_exists("order_tests", "sample_status", "TEXT", default_value="recibida")
         self._ensure_column_exists("order_tests", "sample_issue", "TEXT")
         self._ensure_column_exists("order_tests", "observation", "TEXT")
         self._ensure_column_exists("order_tests", "deleted", "INTEGER", default_value="0")
         self._ensure_column_exists("order_tests", "deleted_reason", "TEXT")
         self._ensure_column_exists("order_tests", "deleted_by", "INTEGER")
         self._ensure_column_exists("order_tests", "deleted_at", "TEXT")
     def authenticate_user(self, username, password):
         self.cur.execute("SELECT id, username, role FROM users WHERE username=? AND password=?", (username, password))
         row = self.cur.fetchone()
         if row:
             uid, user, role = row
             return {"id": uid, "username": user, "role": role}
         else:
             return None
     def create_user(self, username, password, role):
         try:
             self.cur.execute("INSERT INTO users(username, password, role) VALUES (?,?,?)", (username, password, role))
             self.conn.commit()
             return True
         except sqlite3.IntegrityError:
             return False
     def find_patient(self, doc_type, doc_number):
         self.cur.execute("SELECT * FROM patients WHERE doc_type=? AND doc_number=?", (doc_type, doc_number))
         return self.cur.fetchone()
-    def add_or_update_patient(self, doc_type, doc_number, first_name, last_name, birth_date, sex, origin, hcl, height, weight, blood_pressure):
+    def add_or_update_patient(
+        self,
+        doc_type,
+        doc_number,
+        first_name,
+        last_name,
+        birth_date,
+        sex,
+        origin,
+        hcl,
+        height,
+        weight,
+        blood_pressure,
+        is_pregnant=False,
+        gestational_age_weeks=None,
+        expected_delivery_date=None
+    ):
         first_name = first_name.upper() if first_name else first_name
         last_name = last_name.upper() if last_name else last_name
         existing = self.find_patient(doc_type, doc_number)
+        preg_flag = 1 if is_pregnant else 0
+        gest_age = None
+        if gestational_age_weeks is not None:
+            try:
+                gest_age = int(gestational_age_weeks)
+            except (TypeError, ValueError):
+                gest_age = None
+        delivery_date = expected_delivery_date if expected_delivery_date else None
         if existing:
             pid = existing[0]
             self.cur.execute("""
-                UPDATE patients SET first_name=?, last_name=?, birth_date=?, sex=?, origin=?, hcl=?, height=?, weight=?, blood_pressure=?
+                UPDATE patients
+                SET first_name=?, last_name=?, birth_date=?, sex=?, origin=?, hcl=?, height=?, weight=?, blood_pressure=?,
+                    is_pregnant=?, gestational_age_weeks=?, expected_delivery_date=?
                 WHERE id=?
-            """, (first_name, last_name, birth_date, sex, origin, hcl, height, weight, blood_pressure, pid))
+            """, (
+                first_name,
+                last_name,
+                birth_date,
+                sex,
+                origin,
+                hcl,
+                height,
+                weight,
+                blood_pressure,
+                preg_flag,
+                gest_age,
+                delivery_date,
+                pid
+            ))
             self.conn.commit()
             return pid
         else:
             self.cur.execute("""
-                INSERT INTO patients(doc_type, doc_number, first_name, last_name, birth_date, sex, origin, hcl, height, weight, blood_pressure)
-                VALUES (?,?,?,?,?,?,?,?,?,?,?)
-            """, (doc_type, doc_number, first_name, last_name, birth_date, sex, origin, hcl, height, weight, blood_pressure))
+                INSERT INTO patients(
+                    doc_type,
+                    doc_number,
+                    first_name,
+                    last_name,
+                    birth_date,
+                    sex,
+                    origin,
+                    hcl,
+                    height,
+                    weight,
+                    blood_pressure,
+                    is_pregnant,
+                    gestational_age_weeks,
+                    expected_delivery_date
+                )
+                VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?)
+            """, (
+                doc_type,
+                doc_number,
+                first_name,
+                last_name,
+                birth_date,
+                sex,
+                origin,
+                hcl,
+                height,
+                weight,
+                blood_pressure,
+                preg_flag,
+                gest_age,
+                delivery_date
+            ))
             self.conn.commit()
             return self.cur.lastrowid
+
     def add_order_with_tests(
         self,
         patient_id,
         test_names,
         user_id,
         observations="",
         requested_by="",
         diagnosis="",
         age_years=None,
         sample_date=None
     ):
         import datetime
         date_str = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
         sample_date_str = None
         if sample_date:
             sample_date_str = str(sample_date)
         age_value = None
         if age_years is not None:
             try:
                 age_value = int(age_years)
             except (TypeError, ValueError):
                 age_value = None
         self.cur.execute("""
             INSERT INTO orders(patient_id, date, sample_date, created_by, observations, requested_by, diagnosis, age_years, completed)
             VALUES (?,?,?,?,?,?,?,?,?)
diff --git a/database.py b/database.py
index df285039fb63c64a60f95225fda7066324446451..f2d4db70033f6a67416bfe5fbbd37547a8f36ca6 100644
--- a/database.py
+++ b/database.py
@@ -355,84 +432,90 @@ class LabDB:
             WHERE o.completed=0
             ORDER BY o.date ASC, o.id ASC
         """)
         return self.cur.fetchall()
     def get_completed_orders(self, include_emitted=False):
         if include_emitted:
             self.cur.execute("""
                 SELECT o.id, p.first_name, p.last_name, o.date, p.doc_type, p.doc_number, o.emitted, o.emitted_at
                 FROM orders o
                 JOIN patients p ON o.patient_id=p.id
                 WHERE o.completed=1
                 ORDER BY o.date ASC, o.id ASC
             """)
         else:
             self.cur.execute("""
                 SELECT o.id, p.first_name, p.last_name, o.date, p.doc_type, p.doc_number, o.emitted, o.emitted_at
                 FROM orders o
                 JOIN patients p ON o.patient_id=p.id
                 WHERE o.completed=1 AND (o.emitted IS NULL OR o.emitted=0)
                 ORDER BY o.date ASC, o.id ASC
             """)
         return self.cur.fetchall()
     def get_order_details(self, order_id):
         self.cur.execute("""
             SELECT p.first_name, p.last_name, p.doc_type, p.doc_number, p.birth_date, p.sex, p.origin, p.hcl,
+                   p.is_pregnant, p.gestational_age_weeks, p.expected_delivery_date,
                    o.date, o.sample_date, o.observations, o.requested_by, o.diagnosis, o.age_years, o.emitted, o.emitted_at
             FROM orders o
             JOIN patients p ON o.patient_id = p.id
             WHERE o.id = ?
         """, (order_id,))
         header = self.cur.fetchone()
         if not header:
             return None
         (first_name, last_name, doc_type, doc_number, birth_date, sex, origin, hcl,
+         is_pregnant, gest_age_weeks, expected_delivery,
          date, sample_date, obs, req_by, diag, age_years, emitted, emitted_at) = header
         patient_info = {
             "name": f"{(first_name or '').upper()} {(last_name or '').upper()}".strip(),
             "doc_type": doc_type,
             "doc_number": doc_number,
             "birth_date": birth_date,
             "sex": sex,
             "origin": origin,
-            "hcl": hcl
+            "hcl": hcl,
+            "is_pregnant": bool(is_pregnant) if is_pregnant not in (None, "") else False,
+            "gestational_age_weeks": gest_age_weeks,
+            "expected_delivery_date": expected_delivery
         }
         order_info = {
             "date": date,
             "sample_date": sample_date,
             "observations": obs,
             "requested_by": req_by,
             "diagnosis": diag,
             "age_years": age_years,
             "emitted": emitted,
             "emitted_at": emitted_at,
         }
         self.cur.execute("""
-            SELECT t.name, ot.result, t.category
+            SELECT t.name, ot.result, t.category, ot.sample_status, ot.sample_issue, ot.observation, ot.id
             FROM order_tests ot
             JOIN tests t ON ot.test_id = t.id
             WHERE ot.order_id = ?
+              AND (ot.deleted IS NULL OR ot.deleted=0)
             ORDER BY ot.id ASC
         """, (order_id,))
         results = self.cur.fetchall()
         return {"patient": patient_info, "order": order_info, "results": results}
     def save_results(self, order_id, results_dict):
         for name, payload in results_dict.items():
             if name not in self.test_map:
                 continue
             tid = self.test_map[name]
             result_value = payload
             sample_status = None
             sample_issue = None
             observation = None
             if isinstance(payload, dict) and "result" in payload:
                 result_value = payload.get("result")
                 sample_status = payload.get("sample_status")
                 sample_issue = payload.get("sample_issue")
                 observation = payload.get("observation")
             if isinstance(result_value, dict):
                 stored = json.dumps(result_value, ensure_ascii=False)
             else:
                 stored = result_value
             if sample_status is None:
                 sample_status = "recibida"
             if sample_issue is None:
