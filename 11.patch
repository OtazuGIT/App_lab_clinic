diff --git a/main_window.py b/main_window.py
index e6901ae208ed1a9c602f796792a1fe76b68592a3..aa31832c48e5367ed17f089330a37152b5fefe28 100644
--- a/main_window.py
+++ b/main_window.py
@@ -35,87 +35,73 @@ HEMOGRAM_BASE_FIELDS = [
         "label": "Hemoglobina (Hb)",
         "unit": "g/dL",
         "reference": (
             "RN: 14.0-24.0 g/dL\n"
             "1-12 meses: 10.0-12.5 g/dL\n"
             "Niños 1-12 años: 11.5-15.5 g/dL\n"
             "Mujeres adultas: 12.0-16.0 g/dL\n"
             "Hombres adultos: 13.5-17.5 g/dL\n"
             "Gestantes (2°-3° trim): ≥11.0 g/dL"
         ),
         "placeholder": "Ej. 14.1"
     },
     {
         "key": "leucocitos",
         "label": "Leucocitos",
         "unit": "/µL",
         "reference": (
             "RN: 9 000-30 000 /µL\n"
             "1-12 meses: 6 000-17 500 /µL\n"
             "Niños 1-6 años: 5 000-15 500 /µL\n"
             "Niños 6-18 años: 4 500-13 500 /µL\n"
             "Adultos: 4 500-11 000 /µL"
         ),
         "placeholder": "Ej. 7 500"
     },
-    {
-        "key": "leucocitos_conteo",
-        "label": "Agregar conteo (leucocitos)",
-        "helper": "Ingrese el conteo manual; se multiplicará por 50 para el total",
-        "optional": True,
-        "placeholder": "Ej. 120"
-    },
     {
         "key": "eritrocitos",
         "label": "Recuento de hematíes (RBC)",
         "unit": "millones/µL",
         "reference": (
             "RN: 4.1-6.1 millones/µL\n"
             "Niños 1-10 años: 3.9-5.3 millones/µL\n"
             "Hombres adultos: 4.5-6.0 millones/µL\n"
             "Mujeres adultas: 4.0-5.4 millones/µL"
         ),
         "placeholder": "Ej. 4.8"
     },
     {
         "key": "plaquetas",
         "label": "Plaquetas",
         "unit": "/µL",
         "reference": (
             "RN: 150 000-450 000 /µL\n"
             "Niños: 150 000-450 000 /µL\n"
             "Adultos: 150 000-400 000 /µL"
         ),
         "placeholder": "Ej. 250 000"
     },
-    {
-        "key": "plaquetas_conteo",
-        "label": "Agregar conteo (plaquetas)",
-        "helper": "Ingrese el conteo manual; se multiplicará por 15000 para el total",
-        "optional": True,
-        "placeholder": "Ej. 12"
-    },
     {
         "key": "segmentados",
         "label": "Segmentados",
         "unit": "%",
         "reference": (
             "Adultos: 40-75 %\n"
             "Niños 1-6 años: 30-60 %"
         )
     },
     {
         "key": "abastonados",
         "label": "Abastonados",
         "unit": "%",
         "reference": "0-6 %",
         "optional": True
     },
     {
         "key": "linfocitos",
         "label": "Linfocitos",
         "unit": "%",
         "reference": (
             "RN: 22-35 %\n"
             "Niños 1-6 años: 40-65 %\n"
             "Adultos: 20-45 %"
         )
diff --git a/main_window.py b/main_window.py
index e6901ae208ed1a9c602f796792a1fe76b68592a3..aa31832c48e5367ed17f089330a37152b5fefe28 100644
--- a/main_window.py
+++ b/main_window.py
@@ -392,99 +378,63 @@ WIDAL_FIELDS = [
     {"key": "antigeno_ah", "label": "Antígeno AH", "reference": "Negativo: <1:80", "optional": True},
     {"key": "antigeno_bh", "label": "Antígeno BH", "reference": "Negativo: <1:80", "optional": True},
     {"key": "observaciones", "label": "Observaciones", "type": "text_area", "optional": True}
 ]
 
 def build_sample_tracking_template(reference_note):
     return {
         "fields": [
             {"key": "hora_toma", "label": "Hora de toma/envío", "placeholder": "HH:MM", "reference": "Registrar hora oficial de la toma"},
             {"key": "destino", "label": "Destino / referencia", "optional": True, "placeholder": "Ej. Laboratorio de referencia"},
             {"key": "observaciones", "label": "Observaciones", "type": "text_area", "optional": True, "reference": reference_note}
         ]
     }
 
 TEST_TEMPLATES = {
     "Hemograma manual": {
         "fields": copy.deepcopy(HEMOGRAM_BASE_FIELDS),
         "auto_calculations": [
             {
                 "source": "hematocrito",
                 "target": "hemoglobina",
                 "operation": "divide",
                 "operand": 3.03,
                 "decimals": 2,
                 "description": "Hb = Hto / 3.03 (cálculo automático)",
-            },
-            {
-                "source": "leucocitos_conteo",
-                "target": "leucocitos",
-                "operation": "multiply",
-                "operand": 50,
-                "decimals": 0,
-                "description": "Total de leucocitos = conteo × 50",
-                "clear_on_invalid": True
-            },
-            {
-                "source": "plaquetas_conteo",
-                "target": "plaquetas",
-                "operation": "multiply",
-                "operand": 15000,
-                "decimals": 0,
-                "description": "Total de plaquetas = conteo × 15000",
-                "clear_on_invalid": True
             }
         ]
     },
     "Hemograma automatizado": {
         "fields": copy.deepcopy(HEMOGRAM_BASE_FIELDS),
         "auto_calculations": [
             {
                 "source": "hematocrito",
                 "target": "hemoglobina",
                 "operation": "divide",
                 "operand": 3.03,
                 "decimals": 2,
                 "description": "Hb = Hto / 3.03 (cálculo automático)",
-            },
-            {
-                "source": "leucocitos_conteo",
-                "target": "leucocitos",
-                "operation": "multiply",
-                "operand": 50,
-                "decimals": 0,
-                "description": "Total de leucocitos = conteo × 50",
-                "clear_on_invalid": True
-            },
-            {
-                "source": "plaquetas_conteo",
-                "target": "plaquetas",
-                "operation": "multiply",
-                "operand": 15000,
-                "decimals": 0,
-                "description": "Total de plaquetas = conteo × 15000",
-                "clear_on_invalid": True
             }
         ]
     },
     "Examen completo de orina": {"fields": copy.deepcopy(URINE_BASE_FIELDS)},
     "Sedimento urinario": {"fields": copy.deepcopy(SEDIMENTO_FIELDS)},
     "Examen coprológico (directo)": {"fields": copy.deepcopy(COPRO_DIRECT_FIELDS)},
     "Examen coprológico (concentración)": {"fields": copy.deepcopy(COPRO_CONCENT_FIELDS)},
     "Coloración de Gram": {"fields": copy.deepcopy(GRAM_FIELDS)},
     "Reacción inflamatoria": {"fields": copy.deepcopy(REACTION_FIELDS)},
     "Test de aminas": {
         "fields": [
             {"key": "resultado", "label": "Resultado", "type": "bool", "positive_text": "Positivo", "negative_text": "Negativo", "reference": "Negativo"},
             {"key": "olor_caracteristico", "label": "Olor característico", "optional": True},
             {"key": "observaciones", "label": "Observaciones", "type": "text_area", "optional": True}
         ]
     },
     "Test de Helecho": {
         "fields": [
             {"key": "resultado", "label": "Resultado", "type": "bool", "positive_text": "Positivo", "negative_text": "Negativo", "reference": "Patrón negativo"},
             {"key": "observaciones", "label": "Observaciones", "type": "text_area", "optional": True}
         ]
     },
     "Secreción vaginal": {"fields": copy.deepcopy(SECRECION_VAGINAL_FIELDS)},
     "Secreción (otros sitios)": {"fields": copy.deepcopy(SECRECION_GENERAL_FIELDS)},
     "Constantes corpusculares": {"fields": copy.deepcopy(CONST_CORPUSCULAR_FIELDS)},
diff --git a/main_window.py b/main_window.py
index e6901ae208ed1a9c602f796792a1fe76b68592a3..aa31832c48e5367ed17f089330a37152b5fefe28 100644
--- a/main_window.py
+++ b/main_window.py
@@ -2475,50 +2425,51 @@ class MainWindow(QMainWindow):
             return
         if not file_path.lower().endswith(".pdf"):
             file_path += ".pdf"
         existing_emission = ord_inf.get('emitted_at')
         mark_as_emitted = not (ord_inf.get('emitted') and existing_emission)
         if mark_as_emitted:
             emission_time = datetime.datetime.now()
             emission_display = emission_time.strftime("%d/%m/%Y %H:%M")
             emission_timestamp = emission_time.strftime("%Y-%m-%d %H:%M:%S")
         else:
             emission_timestamp = existing_emission
             try:
                 parsed = datetime.datetime.strptime(existing_emission, "%Y-%m-%d %H:%M:%S")
                 emission_display = parsed.strftime("%d/%m/%Y %H:%M")
             except Exception:
                 emission_display = existing_emission or "-"
         doc_text = " ".join([part for part in (pat.get('doc_type'), pat.get('doc_number')) if part]) or "-"
         patient_name = (pat.get('name') or '-').upper()
         age_text = self._format_age_text(pat, ord_inf)
         order_date_text = ord_inf.get('date') or "-"
         sex_text = (pat.get('sex') or '-').upper()
         hcl_text = (pat.get('hcl') or '-').upper()
         origin_text = (pat.get('origin') or '-').upper()
         requester_text = (ord_inf.get('requested_by') or '-').upper()
         diagnosis_text = (ord_inf.get('diagnosis') or '-').upper()
+        context = {"patient": pat, "order": ord_inf}
         pdf = FPDF('P', 'mm', 'A4')
         pdf.set_margins(12, 12, 12)
         pdf.set_auto_page_break(True, margin=14)
         pdf.add_page()
         header_image_path = os.path.join("img", "img.png")
         info_pairs = [
             (("Paciente", patient_name), ("Edad", age_text)),
             (("Documento", doc_text.upper() if doc_text else "-"), ("Sexo", sex_text)),
             (("Historia clínica", hcl_text), ("Fecha emisión", emission_display)),
             (("Procedencia", origin_text), ("Fecha muestra", order_date_text)),
             (("Solicitante", requester_text), ("Diagnóstico presuntivo", diagnosis_text)),
         ]
 
         def draw_patient_info():
             col_width = (pdf.w - pdf.l_margin - pdf.r_margin) / 2
 
             def wrap_value_lines(text, width):
                 safe_value = str(text) if text not in (None, "") else "-"
                 safe_value = self._ensure_latin1(safe_value)
                 segments = []
                 for part in safe_value.split('\n'):
                     part = part.strip()
                     if part:
                         segments.append(part)
                 if not segments:
