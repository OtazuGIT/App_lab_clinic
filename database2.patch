diff --git a/database.py b/database.py
index 2a426d9ed90e6d0c19c9c3bfd22ecfe110ca46f0..349aef25dd200cb259987f60ceb6a7bfb7ae8c23 100644
--- a/database.py
+++ b/database.py
@@ -1,26 +1,27 @@
 # database.py
+import json
 import sqlite3
 class LabDB:
     def __init__(self, db_path="lab_db.sqlite"):
         self.db_path = db_path
         self.conn = None
         self.cur = None
         self.test_map = {}
     def connect(self):
         self.conn = sqlite3.connect(self.db_path)
         self.cur = self.conn.cursor()
         self.cur.execute("PRAGMA foreign_keys = ON")
         self.conn.commit()
     def init_db(self):
         # Crear tablas
         self.cur.execute("""
             CREATE TABLE IF NOT EXISTS users (
                 id INTEGER PRIMARY KEY AUTOINCREMENT,
                 username TEXT UNIQUE,
                 password TEXT,
                 role TEXT
             )
         """)
         self.cur.execute("""
             CREATE TABLE IF NOT EXISTS patients (
                 id INTEGER PRIMARY KEY AUTOINCREMENT,
diff --git a/database.py b/database.py
index 2a426d9ed90e6d0c19c9c3bfd22ecfe110ca46f0..349aef25dd200cb259987f60ceb6a7bfb7ae8c23 100644
--- a/database.py
+++ b/database.py
@@ -178,98 +179,105 @@ class LabDB:
             self.conn.commit()
             return self.cur.lastrowid
     def add_order_with_tests(self, patient_id, test_names, user_id, observations="", requested_by="", diagnosis="", age_years=None):
         import datetime
         date_str = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
         age_value = None
         if age_years is not None:
             try:
                 age_value = int(age_years)
             except (TypeError, ValueError):
                 age_value = None
         self.cur.execute("""
             INSERT INTO orders(patient_id, date, created_by, observations, requested_by, diagnosis, age_years, completed)
             VALUES (?,?,?,?,?,?,?,?)
         """, (patient_id, date_str, user_id, observations, requested_by, diagnosis, age_value, 0))
         order_id = self.cur.lastrowid
         for name in test_names:
             if name in self.test_map:
                 test_id = self.test_map[name]
                 self.cur.execute("INSERT INTO order_tests(order_id, test_id, result) VALUES (?,?,?)",
                                  (order_id, test_id, ""))
         self.conn.commit()
         return order_id
     def get_pending_orders(self):
         self.cur.execute("""
-            SELECT o.id, p.first_name, p.last_name, o.date
+            SELECT o.id, p.first_name, p.last_name, o.date, p.doc_type, p.doc_number
             FROM orders o
             JOIN patients p ON o.patient_id=p.id
             WHERE o.completed=0
-            ORDER BY o.date DESC, o.id DESC
+            ORDER BY o.date ASC, o.id ASC
         """)
         return self.cur.fetchall()
     def get_completed_orders(self):
         self.cur.execute("""
-            SELECT o.id, p.first_name, p.last_name, o.date
+            SELECT o.id, p.first_name, p.last_name, o.date, p.doc_type, p.doc_number
             FROM orders o
             JOIN patients p ON o.patient_id=p.id
             WHERE o.completed=1
-            ORDER BY o.date DESC, o.id DESC
+            ORDER BY o.date ASC, o.id ASC
         """)
         return self.cur.fetchall()
     def get_order_details(self, order_id):
         self.cur.execute("""
             SELECT p.first_name, p.last_name, p.doc_type, p.doc_number, p.birth_date, p.sex, p.origin, p.hcl,
                    o.date, o.observations, o.requested_by, o.diagnosis, o.age_years,
                    t.name, ot.result
             FROM orders o
             JOIN patients p ON o.patient_id = p.id
             JOIN order_tests ot ON ot.order_id = o.id
             JOIN tests t ON ot.test_id = t.id
             WHERE o.id = ?
         """, (order_id,))
         rows = self.cur.fetchall()
         if not rows:
             return None
         first_name, last_name, doc_type, doc_number, birth_date, sex, origin, hcl, date, obs, req_by, diag, age_years, _, _ = rows[0]
         patient_info = {
             "name": f"{first_name} {last_name}",
             "doc_type": doc_type,
             "doc_number": doc_number,
             "birth_date": birth_date,
             "sex": sex,
             "origin": origin,
             "hcl": hcl
         }
         order_info = {"date": date, "observations": obs, "requested_by": req_by, "diagnosis": diag, "age_years": age_years}
         results = [(row[12], row[13]) for row in rows]
         return {"patient": patient_info, "order": order_info, "results": results}
     def save_results(self, order_id, results_dict):
         for name, result in results_dict.items():
             if name in self.test_map:
                 tid = self.test_map[name]
-                self.cur.execute("UPDATE order_tests SET result=? WHERE order_id=? AND test_id=?", (result, order_id, tid))
+                if isinstance(result, dict):
+                    stored = json.dumps(result, ensure_ascii=False)
+                else:
+                    stored = result
+                self.cur.execute(
+                    "UPDATE order_tests SET result=? WHERE order_id=? AND test_id=?",
+                    (stored, order_id, tid)
+                )
         # Verificar si quedan resultados vac√≠os
         self.cur.execute("SELECT COUNT(*) FROM order_tests WHERE order_id=? AND (result IS NULL OR result='')", (order_id,))
         remaining = self.cur.fetchone()[0]
         completed_flag = 1 if remaining == 0 else 0
         self.cur.execute("UPDATE orders SET completed=? WHERE id=?", (completed_flag, order_id))
         self.conn.commit()
         return completed_flag
     def get_statistics(self):
         stats = {}
         self.cur.execute("SELECT COUNT(*) FROM patients"); stats["total_patients"] = self.cur.fetchone()[0]
         self.cur.execute("SELECT COUNT(*) FROM orders"); stats["total_orders"] = self.cur.fetchone()[0]
         self.cur.execute("SELECT COUNT(*) FROM order_tests"); stats["total_tests_conducted"] = self.cur.fetchone()[0]
         self.cur.execute("""
             SELECT t.category, COUNT(*) FROM order_tests ot JOIN tests t ON ot.test_id = t.id GROUP BY t.category
         """)
         stats["by_category"] = self.cur.fetchall()
         return stats
     def get_distinct_requesters(self):
         self.cur.execute("SELECT DISTINCT requested_by FROM orders WHERE requested_by IS NOT NULL AND requested_by<>'' ORDER BY requested_by")
         return [row[0] for row in self.cur.fetchall() if row[0]]
     def _ensure_column_exists(self, table_name, column_name, column_type, default_value=None):
         self.cur.execute(f"PRAGMA table_info({table_name})")
         columns = [info[1] for info in self.cur.fetchall()]
         if column_name not in columns:
             alter_sql = f"ALTER TABLE {table_name} ADD COLUMN {column_name} {column_type}"
