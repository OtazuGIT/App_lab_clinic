diff --git a/database.py b/database.py
index 3b018a4c48d30cd0d235096b9fa9d8a3160be5c4..5a8e488cf4b9d31d975520895a932c298c865798 100644
--- a/database.py
+++ b/database.py
@@ -226,127 +226,160 @@ class LabDB:
             WHERE o.completed=0
             ORDER BY o.date ASC, o.id ASC
         """)
         return self.cur.fetchall()
     def get_completed_orders(self, include_emitted=False):
         if include_emitted:
             self.cur.execute("""
                 SELECT o.id, p.first_name, p.last_name, o.date, p.doc_type, p.doc_number, o.emitted, o.emitted_at
                 FROM orders o
                 JOIN patients p ON o.patient_id=p.id
                 WHERE o.completed=1
                 ORDER BY o.date ASC, o.id ASC
             """)
         else:
             self.cur.execute("""
                 SELECT o.id, p.first_name, p.last_name, o.date, p.doc_type, p.doc_number, o.emitted, o.emitted_at
                 FROM orders o
                 JOIN patients p ON o.patient_id=p.id
                 WHERE o.completed=1 AND (o.emitted IS NULL OR o.emitted=0)
                 ORDER BY o.date ASC, o.id ASC
             """)
         return self.cur.fetchall()
     def get_order_details(self, order_id):
         self.cur.execute("""
             SELECT p.first_name, p.last_name, p.doc_type, p.doc_number, p.birth_date, p.sex, p.origin, p.hcl,
-                   o.date, o.observations, o.requested_by, o.diagnosis, o.age_years, o.emitted, o.emitted_at,
-                   t.name, ot.result, t.category
+                   o.date, o.observations, o.requested_by, o.diagnosis, o.age_years, o.emitted, o.emitted_at
             FROM orders o
             JOIN patients p ON o.patient_id = p.id
-            JOIN order_tests ot ON ot.order_id = o.id
-            JOIN tests t ON ot.test_id = t.id
             WHERE o.id = ?
         """, (order_id,))
-        rows = self.cur.fetchall()
-        if not rows:
+        header = self.cur.fetchone()
+        if not header:
             return None
-        first_name, last_name, doc_type, doc_number, birth_date, sex, origin, hcl, date, obs, req_by, diag, age_years, emitted, emitted_at, _, _, _ = rows[0]
+        (first_name, last_name, doc_type, doc_number, birth_date, sex, origin, hcl,
+         date, obs, req_by, diag, age_years, emitted, emitted_at) = header
         patient_info = {
             "name": f"{(first_name or '').upper()} {(last_name or '').upper()}".strip(),
             "doc_type": doc_type,
             "doc_number": doc_number,
             "birth_date": birth_date,
             "sex": sex,
             "origin": origin,
             "hcl": hcl
         }
         order_info = {
             "date": date,
             "observations": obs,
             "requested_by": req_by,
             "diagnosis": diag,
             "age_years": age_years,
             "emitted": emitted,
             "emitted_at": emitted_at,
         }
-        results = [(row[15], row[16], row[17]) for row in rows]
+        self.cur.execute("""
+            SELECT t.name, ot.result, t.category
+            FROM order_tests ot
+            JOIN tests t ON ot.test_id = t.id
+            WHERE ot.order_id = ?
+            ORDER BY ot.id ASC
+        """, (order_id,))
+        results = self.cur.fetchall()
         return {"patient": patient_info, "order": order_info, "results": results}
     def save_results(self, order_id, results_dict):
         for name, result in results_dict.items():
             if name in self.test_map:
                 tid = self.test_map[name]
                 if isinstance(result, dict):
                     stored = json.dumps(result, ensure_ascii=False)
                 else:
                     stored = result
                 self.cur.execute(
                     "UPDATE order_tests SET result=? WHERE order_id=? AND test_id=?",
                     (stored, order_id, tid)
                 )
-        # Verificar si quedan resultados vac√≠os
-        self.cur.execute("SELECT COUNT(*) FROM order_tests WHERE order_id=? AND (result IS NULL OR result='')", (order_id,))
-        remaining = self.cur.fetchone()[0]
-        completed_flag = 1 if remaining == 0 else 0
+        return self._update_order_completion(order_id)
+
+    def remove_test_from_order(self, order_id, test_name):
+        if not test_name:
+            return False
+        if test_name not in self.test_map:
+            self.cur.execute("SELECT id FROM tests WHERE name=?", (test_name,))
+            row = self.cur.fetchone()
+            if row:
+                self.test_map[test_name] = row[0]
+        tid = self.test_map.get(test_name)
+        if not tid:
+            return False
+        self.cur.execute("DELETE FROM order_tests WHERE order_id=? AND test_id=?", (order_id, tid))
+        if self.cur.rowcount:
+            self._update_order_completion(order_id)
+            return True
+        self.conn.commit()
+        return False
+
+    def _update_order_completion(self, order_id):
+        self.cur.execute("SELECT COUNT(*) FROM order_tests WHERE order_id=?", (order_id,))
+        total = self.cur.fetchone()[0]
+        if total == 0:
+            completed_flag = 1
+        else:
+            self.cur.execute(
+                "SELECT COUNT(*) FROM order_tests WHERE order_id=? AND (result IS NULL OR result='')",
+                (order_id,)
+            )
+            pending = self.cur.fetchone()[0]
+            completed_flag = 1 if pending == 0 else 0
         self.cur.execute("UPDATE orders SET completed=? WHERE id=?", (completed_flag, order_id))
         self.conn.commit()
         return completed_flag
     def mark_order_emitted(self, order_id, emitted_at):
         self.cur.execute(
             """
             UPDATE orders
             SET emitted=1,
                 emitted_at=COALESCE(emitted_at, ?)
             WHERE id=?
             """,
             (emitted_at, order_id)
         )
         self.conn.commit()
     def get_statistics(self):
         stats = {}
         self.cur.execute("SELECT COUNT(*) FROM patients"); stats["total_patients"] = self.cur.fetchone()[0]
         self.cur.execute("SELECT COUNT(*) FROM orders"); stats["total_orders"] = self.cur.fetchone()[0]
         self.cur.execute("SELECT COUNT(*) FROM order_tests"); stats["total_tests_conducted"] = self.cur.fetchone()[0]
         self.cur.execute("""
             SELECT t.category, COUNT(*) FROM order_tests ot JOIN tests t ON ot.test_id = t.id GROUP BY t.category
         """)
         stats["by_category"] = self.cur.fetchall()
         return stats
     def get_results_in_range(self, start_datetime, end_datetime):
         self.cur.execute(
             """
             SELECT o.id, o.date, p.first_name, p.last_name, p.doc_type, p.doc_number,
-                   o.age_years, t.name, t.category, ot.result
+                   p.sex, p.birth_date, o.age_years, t.name, t.category, ot.result
             FROM order_tests ot
             JOIN orders o ON ot.order_id = o.id
             JOIN patients p ON o.patient_id = p.id
             JOIN tests t ON ot.test_id = t.id
             WHERE datetime(o.date) BETWEEN datetime(?) AND datetime(?)
             ORDER BY datetime(o.date) ASC, o.id ASC, ot.id ASC
             """,
             (start_datetime, end_datetime)
         )
         return self.cur.fetchall()
     def get_distinct_requesters(self):
         self.cur.execute("SELECT DISTINCT requested_by FROM orders WHERE requested_by IS NOT NULL AND requested_by<>'' ORDER BY requested_by")
         return [row[0] for row in self.cur.fetchall() if row[0]]
     def _ensure_column_exists(self, table_name, column_name, column_type, default_value=None):
         self.cur.execute(f"PRAGMA table_info({table_name})")
         columns = [info[1] for info in self.cur.fetchall()]
         if column_name not in columns:
             alter_sql = f"ALTER TABLE {table_name} ADD COLUMN {column_name} {column_type}"
             if default_value is not None:
                 alter_sql += f" DEFAULT '{default_value}'"
             self.cur.execute(alter_sql)
             self.conn.commit()
 
     def get_all_tests(self):
         self.cur.execute("SELECT name, category FROM tests ORDER BY category, name")
diff --git a/database.py b/database.py
index 3b018a4c48d30cd0d235096b9fa9d8a3160be5c4..5a8e488cf4b9d31d975520895a932c298c865798 100644
--- a/database.py
+++ b/database.py
@@ -373,50 +406,50 @@ class LabDB:
         for name in test_names:
             if name not in self.test_map:
                 self.cur.execute("SELECT id FROM tests WHERE name=?", (name,))
                 row = self.cur.fetchone()
                 if row:
                     self.test_map[name] = row[0]
             if name in self.test_map and name not in existing:
                 test_id = self.test_map[name]
                 self.cur.execute(
                     "INSERT INTO order_tests(order_id, test_id, result) VALUES (?,?,?)",
                     (order_id, test_id, "")
                 )
                 added.append(name)
         if added:
             self.cur.execute("UPDATE orders SET completed=0 WHERE id=?", (order_id,))
         self.conn.commit()
         return added
 
     def get_patient_history_by_document(self, doc_number, doc_type=None):
         if not doc_number:
             return []
         params = [doc_number]
         query = """
             SELECT o.id, o.date, t.name, ot.result, t.category,
                    p.first_name, p.last_name, p.doc_type, p.doc_number,
-                   o.age_years, o.emitted, o.emitted_at
+                   p.sex, p.birth_date, o.age_years, o.emitted, o.emitted_at
             FROM orders o
             JOIN patients p ON o.patient_id = p.id
             JOIN order_tests ot ON ot.order_id = o.id
             JOIN tests t ON ot.test_id = t.id
             WHERE p.doc_number = ?
         """
         if doc_type:
             query += " AND p.doc_type = ?"
             params.append(doc_type)
         query += " ORDER BY datetime(o.date) DESC, o.id DESC, t.name ASC"
         self.cur.execute(query, params)
         return self.cur.fetchall()
 
     def _ensure_test_renamed(self, old_name, new_name):
         if old_name == new_name:
             return
         self.cur.execute("UPDATE tests SET name=? WHERE name=?", (new_name, old_name))
         self.conn.commit()
 
     def _ensure_test_exists(self, name, category):
         self.cur.execute("SELECT id FROM tests WHERE name=?", (name,))
         if not self.cur.fetchone():
             self.cur.execute("INSERT INTO tests(name, category) VALUES (?,?)", (name, category))
             self.conn.commit()
