diff --git a/database.py b/database.py
index b002546270892b83b4e5e5c91ba1f549a097188f..3b018a4c48d30cd0d235096b9fa9d8a3160be5c4 100644
--- a/database.py
+++ b/database.py
@@ -302,51 +302,51 @@ class LabDB:
     def mark_order_emitted(self, order_id, emitted_at):
         self.cur.execute(
             """
             UPDATE orders
             SET emitted=1,
                 emitted_at=COALESCE(emitted_at, ?)
             WHERE id=?
             """,
             (emitted_at, order_id)
         )
         self.conn.commit()
     def get_statistics(self):
         stats = {}
         self.cur.execute("SELECT COUNT(*) FROM patients"); stats["total_patients"] = self.cur.fetchone()[0]
         self.cur.execute("SELECT COUNT(*) FROM orders"); stats["total_orders"] = self.cur.fetchone()[0]
         self.cur.execute("SELECT COUNT(*) FROM order_tests"); stats["total_tests_conducted"] = self.cur.fetchone()[0]
         self.cur.execute("""
             SELECT t.category, COUNT(*) FROM order_tests ot JOIN tests t ON ot.test_id = t.id GROUP BY t.category
         """)
         stats["by_category"] = self.cur.fetchall()
         return stats
     def get_results_in_range(self, start_datetime, end_datetime):
         self.cur.execute(
             """
             SELECT o.id, o.date, p.first_name, p.last_name, p.doc_type, p.doc_number,
-                   o.age_years, t.name, ot.result
+                   o.age_years, t.name, t.category, ot.result
             FROM order_tests ot
             JOIN orders o ON ot.order_id = o.id
             JOIN patients p ON o.patient_id = p.id
             JOIN tests t ON ot.test_id = t.id
             WHERE datetime(o.date) BETWEEN datetime(?) AND datetime(?)
             ORDER BY datetime(o.date) ASC, o.id ASC, ot.id ASC
             """,
             (start_datetime, end_datetime)
         )
         return self.cur.fetchall()
     def get_distinct_requesters(self):
         self.cur.execute("SELECT DISTINCT requested_by FROM orders WHERE requested_by IS NOT NULL AND requested_by<>'' ORDER BY requested_by")
         return [row[0] for row in self.cur.fetchall() if row[0]]
     def _ensure_column_exists(self, table_name, column_name, column_type, default_value=None):
         self.cur.execute(f"PRAGMA table_info({table_name})")
         columns = [info[1] for info in self.cur.fetchall()]
         if column_name not in columns:
             alter_sql = f"ALTER TABLE {table_name} ADD COLUMN {column_name} {column_type}"
             if default_value is not None:
                 alter_sql += f" DEFAULT '{default_value}'"
             self.cur.execute(alter_sql)
             self.conn.commit()
 
     def get_all_tests(self):
         self.cur.execute("SELECT name, category FROM tests ORDER BY category, name")
diff --git a/database.py b/database.py
index b002546270892b83b4e5e5c91ba1f549a097188f..3b018a4c48d30cd0d235096b9fa9d8a3160be5c4 100644
--- a/database.py
+++ b/database.py
@@ -366,36 +366,57 @@ class LabDB:
         self.cur.execute("""
             SELECT t.name FROM order_tests ot
             JOIN tests t ON ot.test_id = t.id
             WHERE ot.order_id=?
         """, (order_id,))
         existing = {row[0] for row in self.cur.fetchall()}
         added = []
         for name in test_names:
             if name not in self.test_map:
                 self.cur.execute("SELECT id FROM tests WHERE name=?", (name,))
                 row = self.cur.fetchone()
                 if row:
                     self.test_map[name] = row[0]
             if name in self.test_map and name not in existing:
                 test_id = self.test_map[name]
                 self.cur.execute(
                     "INSERT INTO order_tests(order_id, test_id, result) VALUES (?,?,?)",
                     (order_id, test_id, "")
                 )
                 added.append(name)
         if added:
             self.cur.execute("UPDATE orders SET completed=0 WHERE id=?", (order_id,))
         self.conn.commit()
         return added
 
+    def get_patient_history_by_document(self, doc_number, doc_type=None):
+        if not doc_number:
+            return []
+        params = [doc_number]
+        query = """
+            SELECT o.id, o.date, t.name, ot.result, t.category,
+                   p.first_name, p.last_name, p.doc_type, p.doc_number,
+                   o.age_years, o.emitted, o.emitted_at
+            FROM orders o
+            JOIN patients p ON o.patient_id = p.id
+            JOIN order_tests ot ON ot.order_id = o.id
+            JOIN tests t ON ot.test_id = t.id
+            WHERE p.doc_number = ?
+        """
+        if doc_type:
+            query += " AND p.doc_type = ?"
+            params.append(doc_type)
+        query += " ORDER BY datetime(o.date) DESC, o.id DESC, t.name ASC"
+        self.cur.execute(query, params)
+        return self.cur.fetchall()
+
     def _ensure_test_renamed(self, old_name, new_name):
         if old_name == new_name:
             return
         self.cur.execute("UPDATE tests SET name=? WHERE name=?", (new_name, old_name))
         self.conn.commit()
 
     def _ensure_test_exists(self, name, category):
         self.cur.execute("SELECT id FROM tests WHERE name=?", (name,))
         if not self.cur.fetchone():
             self.cur.execute("INSERT INTO tests(name, category) VALUES (?,?)", (name, category))
             self.conn.commit()
