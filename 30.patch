diff --git a/database.py b/database.py
index 9ba676c209b308ca18b8ecb5180242e30a295bf8..441d8fb5c56c1f95210e4f1bc2b4245cc7c086b5 100644
--- a/database.py
+++ b/database.py
@@ -698,51 +698,52 @@ class LabDB:
             """
             SELECT t.category, t.name, COUNT(*)
             FROM order_tests ot
             JOIN tests t ON ot.test_id = t.id
             JOIN orders o ON ot.order_id = o.id
             WHERE (ot.deleted IS NULL OR ot.deleted=0)
               AND (o.deleted IS NULL OR o.deleted=0)
         """
             + (" AND datetime(o.date) BETWEEN datetime(?) AND datetime(?)" if tests_params else "") +
             " GROUP BY t.category, t.name ORDER BY t.category, t.name",
             tests_params
         )
         detail_rows = self.cur.fetchall()
         detail = OrderedDict()
         for category, test_name, count in detail_rows:
             if category not in detail:
                 detail[category] = {"total": 0, "tests": []}
             detail[category]["tests"].append((test_name, count))
             detail[category]["total"] += count
         stats["by_category_detail"] = detail
         return stats
     def get_results_in_range(self, start_datetime, end_datetime):
         self.cur.execute(
             """
             SELECT ot.id, o.id, o.date, o.sample_date, p.first_name, p.last_name, p.doc_type, p.doc_number,
-                   p.sex, p.birth_date, p.hcl, p.origin, o.age_years, o.observations, o.insurance_type, o.fua_number,
+                   p.sex, p.birth_date, p.hcl, p.origin, p.is_pregnant, p.gestational_age_weeks, p.expected_delivery_date,
+                   o.age_years, o.observations, o.insurance_type, o.fua_number,
                    t.name, t.category, ot.result, ot.sample_status, ot.sample_issue, ot.observation
             FROM order_tests ot
             JOIN orders o ON ot.order_id = o.id
             JOIN patients p ON o.patient_id = p.id
             JOIN tests t ON ot.test_id = t.id
             WHERE datetime(o.date) BETWEEN datetime(?) AND datetime(?)
               AND (o.deleted IS NULL OR o.deleted=0)
               AND (ot.deleted IS NULL OR ot.deleted=0)
             ORDER BY datetime(o.date) ASC, o.id ASC, ot.id ASC
             """,
             (start_datetime, end_datetime)
         )
         return self.cur.fetchall()
     def get_distinct_requesters(self):
         self.cur.execute("SELECT DISTINCT requested_by FROM orders WHERE requested_by IS NOT NULL AND requested_by<>'' ORDER BY requested_by")
         return [row[0] for row in self.cur.fetchall() if row[0]]
     def _ensure_column_exists(self, table_name, column_name, column_type, default_value=None):
         self.cur.execute(f"PRAGMA table_info({table_name})")
         columns = [info[1] for info in self.cur.fetchall()]
         if column_name not in columns:
             alter_sql = f"ALTER TABLE {table_name} ADD COLUMN {column_name} {column_type}"
             if default_value is not None:
                 alter_sql += f" DEFAULT '{default_value}'"
             self.cur.execute(alter_sql)
             self.conn.commit()
