diff --git a/main_window.py b/main_window.py
index 973b621b3adeee0ed995f0b7b719cb5c7418c25b..682c017958775bb2561d014630e788f0b70a2f2b 100644
--- a/main_window.py
+++ b/main_window.py
@@ -1390,96 +1390,90 @@ class MainWindow(QMainWindow):
                 "doc_type": doc_type or "",
                 "doc_number": doc_number or ""
             }
             self.completed_orders_cache.append(order)
         self._refresh_completed_combo()
     def display_selected_result(self):
         # Mostrar los resultados de la orden seleccionada en el cuadro de texto
         data = self.combo_completed.currentData()
         if data is None:
             return
         order_id = int(data)
         info = self.labdb.get_order_details(order_id)
         if not info:
             return
         pat = info["patient"]; ord_inf = info["order"]; results = info["results"]
         doc_text = " ".join([part for part in (pat.get('doc_type'), pat.get('doc_number')) if part]) or "-"
         lines = [f"Paciente: {pat.get('name') or '-'}", f"Documento: {doc_text}"]
         age_value = self._calculate_age_years(pat, ord_inf)
         lines.append(f"Edad: {age_value} años" if age_value is not None else "Edad: -")
         lines.append(f"Sexo: {pat.get('sex') or '-'}")
         lines.append(f"Historia Clínica: {pat.get('hcl') or '-'}")
         lines.append(f"Procedencia: {pat.get('origin') or '-'}")
         lines.append(f"Fecha de muestra: {ord_inf.get('date') or '-'}")
         emission_display = ord_inf.get('emitted_at') or "Pendiente de emisión"
         lines.append(f"Fecha de emisión: {emission_display}")
-        lines.append(f"Solicitante: {ord_inf.get('requested_by') or '-'}")
-        if ord_inf.get("diagnosis") and ord_inf["diagnosis"].strip():
-            lines.append(f"Diagnóstico presuntivo: {ord_inf['diagnosis']}")
         lines.append("Resultados:")
         for test_name, result in results:
             lines.extend(self._format_result_lines(test_name, result))
         if ord_inf["observations"]:
             lines.append(f"Observaciones: {ord_inf['observations']}")
         self.output_text.setPlainText("\n".join(lines))
 
     def export_pdf(self):
         # Exportar el resultado seleccionado a un archivo PDF
         data = self.combo_completed.currentData()
         if data is None:
             return
         order_id = int(data)
         info = self.labdb.get_order_details(order_id)
         if not info:
             return
         pat = info["patient"]; ord_inf = info["order"]; results = info["results"]
         suggested_name = f"Orden_{order_id}.pdf"
         options = QFileDialog.Options()
         file_path, _ = QFileDialog.getSaveFileName(self, "Guardar PDF", suggested_name, "Archivos PDF (*.pdf)", options=options)
         if not file_path:
             return
         if not file_path.lower().endswith(".pdf"):
             file_path += ".pdf"
         emission_time = datetime.datetime.now()
         emission_display = emission_time.strftime("%d/%m/%Y %H:%M")
         emission_timestamp = emission_time.strftime("%Y-%m-%d %H:%M:%S")
         doc_text = " ".join([part for part in (pat.get('doc_type'), pat.get('doc_number')) if part]) or "-"
         age_text = self._format_age_text(pat, ord_inf)
         order_date_text = ord_inf.get('date') or "-"
-        requested_by = ord_inf.get('requested_by') or "-"
-        diagnosis_text = ord_inf.get('diagnosis', "") or "-"
         pdf = FPDF('P', 'mm', 'A4')
         pdf.set_margins(12, 12, 12)
         pdf.set_auto_page_break(True, margin=14)
         pdf.add_page()
         emission_row = ("Fecha emisión", emission_display)
         info_rows = [
             (("Paciente", pat.get('name') or '-'), ("Edad", age_text)),
             (("Documento", doc_text), ("Sexo", pat.get('sex') or '-')),
             (("Historia clínica", pat.get('hcl') or '-'), emission_row),
             (("Procedencia", pat.get('origin') or '-'), ("Fecha muestra", order_date_text)),
-            (("Solicitante", requested_by), ("Diagnóstico", diagnosis_text)),
         ]
 
         header_context = {
             'info_rows': info_rows,
             'emission_display': emission_display
         }
 
         def add_logo(position, x_pos, width, y_pos):
             path = self._find_logo_path(position)
             if not path:
                 return
             try:
                 pdf.image(path, x=x_pos, y=y_pos, w=width)
             except Exception:
                 pass
 
         def draw_page_header():
             pdf.set_fill_color(231, 238, 248)
             pdf.rect(0, 0, pdf.w, 30, 'F')
             top_y = pdf.t_margin - 4
             add_logo('left', pdf.l_margin - 4, 22, top_y)
             add_logo('right', pdf.w - pdf.r_margin - 18, 20, top_y)
             center_logo = self._find_logo_path('center')
             if center_logo:
                 try:
diff --git a/main_window.py b/main_window.py
index 973b621b3adeee0ed995f0b7b719cb5c7418c25b..682c017958775bb2561d014630e788f0b70a2f2b 100644
--- a/main_window.py
+++ b/main_window.py
@@ -1668,60 +1662,50 @@ class MainWindow(QMainWindow):
                 for item in structure.get("items", []):
                     if item.get("type") == "section":
                         render_section_row(item.get("label", ""), sum(column_widths), column_widths, on_new_page)
                         continue
                     row_texts = [
                         item.get('label', ''),
                         item.get('value', '-'),
                         item.get('reference') or '-'
                     ]
                     render_table_row(row_texts, column_widths, on_new_page)
             else:
                 value_text = structure.get("value", "-")
                 ensure_space(6)
                 pdf.set_font("Arial", '', 7)
                 pdf.multi_cell(0, 4, str(value_text))
             pdf.ln(2)
 
         if ord_inf.get('observations'):
             ensure_space(8)
             pdf.set_font("Arial", 'B', 7.4)
             pdf.cell(0, 4.2, "Observaciones", ln=1)
             pdf.set_font("Arial", '', 6.9)
             pdf.multi_cell(0, 3.6, ord_inf['observations'])
             pdf.ln(1.5)
 
-        ensure_space(12)
-        pdf.set_draw_color(210, 210, 210)
-        pdf.line(pdf.l_margin, pdf.get_y(), pdf.w - pdf.r_margin, pdf.get_y())
-        pdf.ln(2)
-        pdf.set_font("Arial", 'I', 6.5)
-        pdf.set_text_color(110, 110, 110)
-        disclaimer_text = ("Este documento es generado electrónicamente por el laboratorio. "
-                           "Para validar la información, contacte a la unidad correspondiente.")
-        pdf.multi_cell(0, 3.4, disclaimer_text)
-        pdf.set_text_color(0, 0, 0)
         try:
             pdf.output(file_path)
         except Exception as e:
             QMessageBox.warning(self, "Error", f"No se pudo guardar el PDF:\n{e}")
             return
         self.labdb.mark_order_emitted(order_id, emission_timestamp)
         QMessageBox.information(self, "Informe emitido", f"Reporte guardado en:\n{file_path}")
         self.populate_completed_orders()
         self.output_text.clear()
 
 
     def export_excel(self):
         # Exportar todos los resultados a un archivo CSV (Excel puede abrirlo)
         options = QFileDialog.Options()
         file_path, _ = QFileDialog.getSaveFileName(self, "Exportar datos", "", "Archivo CSV (*.csv)", options=options)
         if not file_path:
             return
         if not file_path.lower().endswith(".csv"):
             file_path += ".csv"
         self.labdb.cur.execute("""
             SELECT p.first_name, p.last_name, p.doc_type, p.doc_number, t.name, ot.result, o.date, o.requested_by, o.diagnosis, o.age_years
             FROM order_tests ot
             JOIN orders o ON ot.order_id = o.id
             JOIN patients p ON o.patient_id = p.id
             JOIN tests t ON ot.test_id = t.id
