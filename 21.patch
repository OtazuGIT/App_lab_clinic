diff --git a/main_window.py b/main_window.py
index 1f78f357295c908b8c0d1a69dfe17d8f1cc79f7e..b68df2c79f6b03c67b7efabf284a64b70748f477 100644
--- a/main_window.py
+++ b/main_window.py
@@ -2403,50 +2403,65 @@ class MainWindow(QMainWindow):
         field_type = field_info.get("type")
         if field_type == "line":
             widget = field_info.get("widget")
             return widget.text().strip() if widget else ""
         if field_type == "text_area":
             widget = field_info.get("widget")
             return widget.toPlainText().strip() if widget else ""
         if field_type == "combo":
             widget = field_info.get("widget")
             return widget.currentText().strip() if widget else ""
         if field_type == "bool":
             if field_info.get("positive") and field_info["positive"].isChecked():
                 return field_info.get("positive_text", "Positivo")
             if field_info.get("negative") and field_info["negative"].isChecked():
                 return field_info.get("negative_text", "Negativo")
             return ""
         return ""
     def _to_float(self, text):
         if text in (None, ""):
             return None
         try:
             return float(str(text).replace(',', '.'))
         except ValueError:
             return None
 
+    def _add_pdf_page(self, pdf, orientation=None, page_format=None):
+        """Compatibilidad para agregar pÃ¡ginas en diferentes versiones de FPDF."""
+        kwargs = {}
+        if orientation:
+            kwargs["orientation"] = orientation
+        if page_format is not None:
+            kwargs["format"] = page_format
+        try:
+            pdf.add_page(**kwargs)
+        except TypeError:
+            if page_format is not None:
+                kwargs.pop("format", None)
+                kwargs["size"] = page_format
+            pdf.add_page(**kwargs)
+
     def _ensure_latin1(self, text):
         if text is None:
             return ""
         if not isinstance(text, str):
             text = str(text)
         replacements = {
             '\u2013': '-',
             '\u2014': '-',
             '\u2018': "'",
             '\u2019': "'",
             '\u201c': '"',
             '\u201d': '"'
         }
         for bad, good in replacements.items():
             text = text.replace(bad, good)
         try:
             text.encode('latin-1')
             return text
         except UnicodeEncodeError:
             return text.encode('latin-1', 'replace').decode('latin-1')
 
     def _is_blank_result(self, value):
         if value is None:
             return True
         if isinstance(value, str):
diff --git a/main_window.py b/main_window.py
index 1f78f357295c908b8c0d1a69dfe17d8f1cc79f7e..b68df2c79f6b03c67b7efabf284a64b70748f477 100644
--- a/main_window.py
+++ b/main_window.py
@@ -4439,51 +4454,51 @@ class MainWindow(QMainWindow):
         cache = getattr(self, '_activity_cache', {})
         report_start = cache.get("start")
         report_end = cache.get("end")
         if report_start and report_end:
             try:
                 start_date = report_start.date() if isinstance(report_start, datetime.datetime) else report_start
                 end_date = report_end.date() if isinstance(report_end, datetime.datetime) else report_end
             except AttributeError:
                 start_date = end_date = None
             if start_date and end_date and start_date == end_date:
                 self._append_delivery_sheet(pdf, aggregated, start_date)
         try:
             pdf.output(file_path)
         except Exception as exc:
             QMessageBox.warning(self, "Error", f"No se pudo generar el PDF:\n{exc}")
             return
         QMessageBox.information(self, "Exportado", f"Registro guardado en:\n{file_path}")
 
     def _append_delivery_sheet(self, pdf, aggregated, report_date):
         if not aggregated:
             return
         prev_left, prev_top, prev_right, prev_bottom = pdf.l_margin, pdf.t_margin, pdf.r_margin, pdf.b_margin
         prev_auto = pdf.auto_page_break
         pdf.set_margins(6, 10, 6)
         pdf.set_auto_page_break(True, margin=10)
-        pdf.add_page(orientation='L', format='A5')
+        self._add_pdf_page(pdf, orientation='L', page_format='A5')
         pdf.set_font("Arial", 'B', 11)
         pdf.cell(0, 6, self._ensure_latin1("Entrega de resultados"), ln=1, align='C')
         base_date = report_date
         if isinstance(base_date, datetime.datetime):
             base_date = base_date.date()
         if not base_date:
             base_date = datetime.date.today()
         pdf.set_font("Arial", '', 9)
         pdf.cell(
             0,
             5,
             self._ensure_latin1(f"Listado de pacientes - {base_date.strftime('%d/%m/%Y')}"),
             ln=1,
             align='C'
         )
         pdf.ln(1.5)
         columns = [
             {"title": "Fecha de entrega", "width": 24, "min_lines": 1},
             {"title": "Paciente", "width": 42, "min_lines": 2},
             {"title": "Pruebas entregadas", "width": 58, "min_lines": 2},
             {"title": "Entregado por", "width": 34, "min_lines": 2},
             {"title": "Personal que recibe / Observaciones", "width": 40, "min_lines": 3},
         ]
         padding_x = 1.2
         padding_y = 1.0
diff --git a/main_window.py b/main_window.py
index 1f78f357295c908b8c0d1a69dfe17d8f1cc79f7e..b68df2c79f6b03c67b7efabf284a64b70748f477 100644
--- a/main_window.py
+++ b/main_window.py
@@ -4538,51 +4553,51 @@ class MainWindow(QMainWindow):
             for line in header_lines[idx]:
                 pdf.set_xy(start_x + padding_x, text_y)
                 pdf.cell(width - 2 * padding_x, line_height, line, border=0)
                 text_y += line_height
             start_x += width
         pdf.set_xy(pdf.l_margin, start_y + header_height)
         pdf.set_font("Arial", '', 7.2)
         deliverer_info = self._format_user_identity_for_delivery()
         for entry in aggregated:
             cell_values = [
                 entry.get("date") or base_date.strftime("%d/%m/%Y"),
                 entry.get("patient", "-"),
                 "\n".join(entry.get("tests", [])) if entry.get("tests") else "-",
                 deliverer_info,
                 ""
             ]
             wrapped = []
             max_lines = 1
             for column, value in zip(columns, cell_values):
                 lines = wrap_text(value, column["width"] - 2 * padding_x, column["min_lines"])
                 wrapped.append(lines)
                 if len(lines) > max_lines:
                     max_lines = len(lines)
             row_height = max_lines * line_height + 2 * padding_y
             if pdf.get_y() + row_height > pdf.h - pdf.b_margin:
-                pdf.add_page(orientation='L', format='A5')
+                self._add_pdf_page(pdf, orientation='L', page_format='A5')
                 pdf.set_font("Arial", 'B', 11)
                 pdf.cell(0, 6, self._ensure_latin1("Entrega de resultados"), ln=1, align='C')
                 pdf.set_font("Arial", '', 9)
                 pdf.cell(
                     0,
                     5,
                     self._ensure_latin1(f"Listado de pacientes - {base_date.strftime('%d/%m/%Y')}"),
                     ln=1,
                     align='C'
                 )
                 pdf.ln(1.5)
                 pdf.set_font("Arial", 'B', 7.6)
                 start_x = pdf.l_margin
                 start_y = pdf.get_y()
                 for idx, column in enumerate(columns):
                     width = column["width"]
                     pdf.rect(start_x, start_y, width, header_height, style='DF')
                     text_y = start_y + padding_y
                     for line in header_lines[idx]:
                         pdf.set_xy(start_x + padding_x, text_y)
                         pdf.cell(width - 2 * padding_x, line_height, line, border=0)
                         text_y += line_height
                     start_x += width
                 pdf.set_xy(pdf.l_margin, start_y + header_height)
                 pdf.set_font("Arial", '', 7.2)
