diff --git a/database.py b/database.py
index f2d4db70033f6a67416bfe5fbbd37547a8f36ca6..642c4840b922568d51c5ce14e9c48331c6438629 100644
--- a/database.py
+++ b/database.py
@@ -1,49 +1,52 @@
 # database.py
 import json
 import sqlite3
 class LabDB:
     def __init__(self, db_path="lab_db.sqlite"):
         self.db_path = db_path
         self.conn = None
         self.cur = None
         self.test_map = {}
     def connect(self):
         self.conn = sqlite3.connect(self.db_path)
         self.cur = self.conn.cursor()
         self.cur.execute("PRAGMA foreign_keys = ON")
         self.conn.commit()
     def init_db(self):
         # Crear tablas
         self.cur.execute("""
             CREATE TABLE IF NOT EXISTS users (
                 id INTEGER PRIMARY KEY AUTOINCREMENT,
                 username TEXT UNIQUE,
                 password TEXT,
                 role TEXT
             )
         """)
+        self._ensure_column_exists("users", "full_name", "TEXT")
+        self._ensure_column_exists("users", "profession", "TEXT")
+        self._ensure_column_exists("users", "license", "TEXT")
         self.cur.execute("""
             CREATE TABLE IF NOT EXISTS patients (
                 id INTEGER PRIMARY KEY AUTOINCREMENT,
                 doc_type TEXT,
                 doc_number TEXT,
                 first_name TEXT,
                 last_name TEXT,
                 birth_date TEXT,
                 sex TEXT,
                 origin TEXT,
                 hcl TEXT,
                 height REAL,
                 weight REAL,
                 blood_pressure TEXT,
                 is_pregnant INTEGER DEFAULT 0,
                 gestational_age_weeks INTEGER,
                 expected_delivery_date TEXT,
                 UNIQUE(doc_type, doc_number)
             )
         """)
         self.cur.execute("""
             CREATE TABLE IF NOT EXISTS tests (
                 id INTEGER PRIMARY KEY AUTOINCREMENT,
                 name TEXT,
                 category TEXT
diff --git a/database.py b/database.py
index f2d4db70033f6a67416bfe5fbbd37547a8f36ca6..642c4840b922568d51c5ce14e9c48331c6438629 100644
--- a/database.py
+++ b/database.py
@@ -78,53 +81,70 @@ class LabDB:
         self._ensure_column_exists("patients", "is_pregnant", "INTEGER", default_value="0")
         self._ensure_column_exists("patients", "gestational_age_weeks", "INTEGER")
         self._ensure_column_exists("patients", "expected_delivery_date", "TEXT")
         self.cur.execute("""
             CREATE TABLE IF NOT EXISTS order_tests (
                 id INTEGER PRIMARY KEY AUTOINCREMENT,
                 order_id INTEGER,
                 test_id INTEGER,
                 result TEXT,
                 sample_status TEXT DEFAULT 'recibida',
                 sample_issue TEXT,
                 observation TEXT,
                 deleted INTEGER DEFAULT 0,
                 deleted_reason TEXT,
                 deleted_by INTEGER,
                 deleted_at TEXT,
                 FOREIGN KEY(order_id) REFERENCES orders(id),
                 FOREIGN KEY(test_id) REFERENCES tests(id)
             )
         """)
         self.conn.commit()
         # Datos iniciales por defecto
         self.cur.execute("SELECT COUNT(*) FROM users")
         if self.cur.fetchone()[0] == 0:
             # Crear usuario admin por defecto
-            self.cur.execute("INSERT INTO users(username, password, role) VALUES (?,?,?)",
-                             ("admin", "admin", "super"))
+            self.cur.execute(
+                "INSERT INTO users(username, password, role, full_name, profession, license) VALUES (?,?,?,?,?,?)",
+                ("admin", "admin", "super", "Kewin Otazu Mamani", "Biólogo", "C.B.P. 18165")
+            )
             self.conn.commit()
+        else:
+            self.cur.execute("SELECT full_name, profession, license FROM users WHERE username='admin'")
+            row = self.cur.fetchone()
+            if row:
+                full_name, profession, license_code = row
+                if not full_name or not profession or not license_code:
+                    self.cur.execute(
+                        "UPDATE users SET full_name=?, profession=?, license=? WHERE username='admin'",
+                        (
+                            full_name or "Kewin Otazu Mamani",
+                            profession or "Biólogo",
+                            license_code or "C.B.P. 18165"
+                        )
+                    )
+                    self.conn.commit()
         self.cur.execute("SELECT COUNT(*) FROM tests")
         if self.cur.fetchone()[0] == 0:
             tests_by_category = {
                 "HEMATOLOGÍA": [
                     "Lámina periférica", "Hemograma manual", "Hemograma automatizado",
                     "Hemoglobina", "Hematocrito", "Recuento de leucocitos", "Recuento de hematíes",
                     "Recuento de plaquetas", "Constantes corpusculares", "Células LE",
                     "Tiempo de coagulación", "Tiempo de sangría", "Velocidad de sedimentación globular (VSG)"
                 ],
                 "BIOQUÍMICA": [
                     "Glucosa", "Glucosa postprandial", "Tolerancia a la glucosa",
                     "Colesterol Total", "Triglicéridos", "Colesterol HDL", "Colesterol LDL",
                     "Transaminasa Glutámico Oxalacética (TGO)", "Transaminasa Glutámico Pirúvico (TGP)",
                     "Bilirrubina Total", "Bilirrubina Directa", "Úrea", "Creatinina",
                     "Proteína de 24 horas", "Fosfatasa alcalina", "Ácido úrico",
                     "Proteínas Totales", "Albúmina", "Amilasa", "Lipasa",
                     "Gamma Glutamil transferasa (GGT)", "Globulina", "Ferritina",
                     "Hemoglobina glicosilada", "Gases arteriales"
                 ],
                 "INMUNOLOGÍA": [
                     "Grupo sanguíneo y Factor Rh", "Factor reumatoideo", "Reacción de Widal",
                     "Reagina plasmática rápida (RPR)", "Proteína C reactiva (PCR) - Látex",
                     "PCR cuantitativo", "ASO", "Antígeno de superficie Hepatitis B (HBsAg)",
                     "PSA (ELISA)"
                 ],
diff --git a/database.py b/database.py
index f2d4db70033f6a67416bfe5fbbd37547a8f36ca6..642c4840b922568d51c5ce14e9c48331c6438629 100644
--- a/database.py
+++ b/database.py
@@ -167,64 +187,94 @@ class LabDB:
         )
         self._ensure_test_renamed(
             "Cultivo de secreción vaginal",
             "Secreción vaginal"
         )
         self._ensure_test_renamed(
             "Cultivo de otras secreciones",
             "Secreción (otros sitios)"
         )
         self._ensure_test_exists("Secreción vaginal", "MICROBIOLOGÍA")
         self._ensure_test_exists("Secreción (otros sitios)", "MICROBIOLOGÍA")
         self._ensure_test_exists("Hemoglobina - Hematocrito", "HEMATOLOGÍA")
         # Cargar mapa de pruebas (nombre -> id)
         self.cur.execute("SELECT id, name FROM tests")
         for tid, name in self.cur.fetchall():
             self.test_map[name] = tid
         # Ajustar columnas agregadas posteriormente
         self._ensure_column_exists("order_tests", "sample_status", "TEXT", default_value="recibida")
         self._ensure_column_exists("order_tests", "sample_issue", "TEXT")
         self._ensure_column_exists("order_tests", "observation", "TEXT")
         self._ensure_column_exists("order_tests", "deleted", "INTEGER", default_value="0")
         self._ensure_column_exists("order_tests", "deleted_reason", "TEXT")
         self._ensure_column_exists("order_tests", "deleted_by", "INTEGER")
         self._ensure_column_exists("order_tests", "deleted_at", "TEXT")
     def authenticate_user(self, username, password):
-        self.cur.execute("SELECT id, username, role FROM users WHERE username=? AND password=?", (username, password))
+        self.cur.execute(
+            "SELECT id, username, role, full_name, profession, license FROM users WHERE username=? AND password=?",
+            (username, password)
+        )
         row = self.cur.fetchone()
         if row:
-            uid, user, role = row
-            return {"id": uid, "username": user, "role": role}
+            uid, user, role, full_name, profession, license = row
+            return {
+                "id": uid,
+                "username": user,
+                "role": role,
+                "full_name": full_name or "",
+                "profession": profession or "",
+                "license": license or ""
+            }
         else:
             return None
-    def create_user(self, username, password, role):
+    def create_user(self, username, password, role, full_name="", profession="", license=""):
         try:
-            self.cur.execute("INSERT INTO users(username, password, role) VALUES (?,?,?)", (username, password, role))
+            self.cur.execute(
+                """
+                INSERT INTO users(username, password, role, full_name, profession, license)
+                VALUES (?,?,?,?,?,?)
+                """,
+                (username, password, role, full_name or None, profession or None, license or None)
+            )
             self.conn.commit()
             return True
         except sqlite3.IntegrityError:
             return False
+
+    def update_user_profile(self, user_id, full_name, profession, license):
+        if not user_id:
+            return False
+        self.cur.execute(
+            """
+            UPDATE users
+            SET full_name=?, profession=?, license=?
+            WHERE id=?
+            """,
+            (full_name or None, profession or None, license or None, user_id)
+        )
+        self.conn.commit()
+        return self.cur.rowcount > 0
     def find_patient(self, doc_type, doc_number):
         self.cur.execute("SELECT * FROM patients WHERE doc_type=? AND doc_number=?", (doc_type, doc_number))
         return self.cur.fetchone()
     def add_or_update_patient(
         self,
         doc_type,
         doc_number,
         first_name,
         last_name,
         birth_date,
         sex,
         origin,
         hcl,
         height,
         weight,
         blood_pressure,
         is_pregnant=False,
         gestational_age_weeks=None,
         expected_delivery_date=None
     ):
         first_name = first_name.upper() if first_name else first_name
         last_name = last_name.upper() if last_name else last_name
         existing = self.find_patient(doc_type, doc_number)
         preg_flag = 1 if is_pregnant else 0
         gest_age = None
