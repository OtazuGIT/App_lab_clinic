diff --git a/main_window.py b/main_window.py
index 3d99a34a402cf22ad5abd789eb642d31c832e075..3bfd34144235924fc5558a3dad67eb52684719ea 100644
--- a/main_window.py
+++ b/main_window.py
@@ -2426,50 +2426,56 @@ class MainWindow(QMainWindow):
         except ValueError:
             return None
 
     def _add_pdf_page(self, pdf, orientation=None, page_format=None):
         """Compatibilidad para agregar p√°ginas en diferentes versiones de FPDF."""
         try:
             params = inspect.signature(pdf.add_page).parameters
         except (TypeError, ValueError):
             params = {}
 
         args = []
         kwargs = {}
 
         if orientation:
             if "orientation" in params:
                 kwargs["orientation"] = orientation
             else:
                 args.append(orientation)
 
         if page_format is not None:
             if "format" in params:
                 kwargs["format"] = page_format
             elif "size" in params:
                 kwargs["size"] = page_format
             else:
+                # If we already plan to pass the orientation as a keyword argument
+                # but the FPDF version expects positional parameters, convert the
+                # orientation argument back to positional so that the page format can
+                # occupy the second positional slot without conflicting.
+                if "orientation" in kwargs and not args:
+                    args.append(kwargs.pop("orientation"))
                 args.append(page_format)
 
         pdf.add_page(*args, **kwargs)
 
     def _ensure_latin1(self, text):
         if text is None:
             return ""
         if not isinstance(text, str):
             text = str(text)
         replacements = {
             '\u2013': '-',
             '\u2014': '-',
             '\u2018': "'",
             '\u2019': "'",
             '\u201c': '"',
             '\u201d': '"'
         }
         for bad, good in replacements.items():
             text = text.replace(bad, good)
         try:
             text.encode('latin-1')
             return text
         except UnicodeEncodeError:
             return text.encode('latin-1', 'replace').decode('latin-1')
 
